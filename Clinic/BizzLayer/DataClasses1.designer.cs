#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BizzLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Clinic")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertVisit(Visit instance);
    partial void UpdateVisit(Visit instance);
    partial void DeleteVisit(Visit instance);
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertExamination_dictionary(Examination_dictionary instance);
    partial void UpdateExamination_dictionary(Examination_dictionary instance);
    partial void DeleteExamination_dictionary(Examination_dictionary instance);
    partial void InsertLaboratory_examination(Laboratory_examination instance);
    partial void UpdateLaboratory_examination(Laboratory_examination instance);
    partial void DeleteLaboratory_examination(Laboratory_examination instance);
    partial void InsertLaboratory_manager(Laboratory_manager instance);
    partial void UpdateLaboratory_manager(Laboratory_manager instance);
    partial void DeleteLaboratory_manager(Laboratory_manager instance);
    partial void InsertLaboratory_worker(Laboratory_worker instance);
    partial void UpdateLaboratory_worker(Laboratory_worker instance);
    partial void DeleteLaboratory_worker(Laboratory_worker instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPhysical_examination(Physical_examination instance);
    partial void UpdatePhysical_examination(Physical_examination instance);
    partial void DeletePhysical_examination(Physical_examination instance);
    partial void InsertRegistration(Registration instance);
    partial void UpdateRegistration(Registration instance);
    partial void DeleteRegistration(Registration instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::BizzLayer.Properties.Settings.Default.ClinicConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Visit> Visits
		{
			get
			{
				return this.GetTable<Visit>();
			}
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<Examination_dictionary> Examination_dictionaries
		{
			get
			{
				return this.GetTable<Examination_dictionary>();
			}
		}
		
		public System.Data.Linq.Table<Laboratory_examination> Laboratory_examinations
		{
			get
			{
				return this.GetTable<Laboratory_examination>();
			}
		}
		
		public System.Data.Linq.Table<Laboratory_manager> Laboratory_managers
		{
			get
			{
				return this.GetTable<Laboratory_manager>();
			}
		}
		
		public System.Data.Linq.Table<Laboratory_worker> Laboratory_workers
		{
			get
			{
				return this.GetTable<Laboratory_worker>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Physical_examination> Physical_examinations
		{
			get
			{
				return this.GetTable<Physical_examination>();
			}
		}
		
		public System.Data.Linq.Table<Registration> Registrations
		{
			get
			{
				return this.GetTable<Registration>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_patient;
		
		private string _place;
		
		private string _street;
		
		private string _zip_code;
		
		private string _house;
		
		private string _flat;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_patientChanging(int value);
    partial void Onid_patientChanged();
    partial void OnplaceChanging(string value);
    partial void OnplaceChanged();
    partial void OnstreetChanging(string value);
    partial void OnstreetChanged();
    partial void Onzip_codeChanging(string value);
    partial void Onzip_codeChanged();
    partial void OnhouseChanging(string value);
    partial void OnhouseChanged();
    partial void OnflatChanging(string value);
    partial void OnflatChanged();
    #endregion
		
		public Address()
		{
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_patient", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_patient
		{
			get
			{
				return this._id_patient;
			}
			set
			{
				if ((this._id_patient != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_patientChanging(value);
					this.SendPropertyChanging();
					this._id_patient = value;
					this.SendPropertyChanged("id_patient");
					this.Onid_patientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_place", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string place
		{
			get
			{
				return this._place;
			}
			set
			{
				if ((this._place != value))
				{
					this.OnplaceChanging(value);
					this.SendPropertyChanging();
					this._place = value;
					this.SendPropertyChanged("place");
					this.OnplaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_street", DbType="NVarChar(50)")]
		public string street
		{
			get
			{
				return this._street;
			}
			set
			{
				if ((this._street != value))
				{
					this.OnstreetChanging(value);
					this.SendPropertyChanging();
					this._street = value;
					this.SendPropertyChanged("street");
					this.OnstreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zip_code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string zip_code
		{
			get
			{
				return this._zip_code;
			}
			set
			{
				if ((this._zip_code != value))
				{
					this.Onzip_codeChanging(value);
					this.SendPropertyChanging();
					this._zip_code = value;
					this.SendPropertyChanged("zip_code");
					this.Onzip_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_house", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string house
		{
			get
			{
				return this._house;
			}
			set
			{
				if ((this._house != value))
				{
					this.OnhouseChanging(value);
					this.SendPropertyChanging();
					this._house = value;
					this.SendPropertyChanged("house");
					this.OnhouseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_flat", DbType="NVarChar(10)")]
		public string flat
		{
			get
			{
				return this._flat;
			}
			set
			{
				if ((this._flat != value))
				{
					this.OnflatChanging(value);
					this.SendPropertyChanging();
					this._flat = value;
					this.SendPropertyChanged("flat");
					this.OnflatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Address", Storage="_Patient", ThisKey="id_patient", OtherKey="id_patient", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Address = null;
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Address = this;
						this._id_patient = value.id_patient;
					}
					else
					{
						this._id_patient = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Visit")]
	public partial class Visit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_visit;
		
		private string _description;
		
		private string _diagnosis;
		
		private string _state;
		
		private System.DateTime _registration_date;
		
		private System.Nullable<System.DateTime> _execution_cancel_datetime;
		
		private int _id_patient;
		
		private int _id_registration;
		
		private int _id_doctor;
		
		private EntitySet<Laboratory_examination> _Laboratory_examinations;
		
		private EntitySet<Physical_examination> _Physical_examinations;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Registration> _Registration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_visitChanging(int value);
    partial void Onid_visitChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OndiagnosisChanging(string value);
    partial void OndiagnosisChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    partial void Onregistration_dateChanging(System.DateTime value);
    partial void Onregistration_dateChanged();
    partial void Onexecution_cancel_datetimeChanging(System.Nullable<System.DateTime> value);
    partial void Onexecution_cancel_datetimeChanged();
    partial void Onid_patientChanging(int value);
    partial void Onid_patientChanged();
    partial void Onid_registrationChanging(int value);
    partial void Onid_registrationChanged();
    partial void Onid_doctorChanging(int value);
    partial void Onid_doctorChanged();
    #endregion
		
		public Visit()
		{
			this._Laboratory_examinations = new EntitySet<Laboratory_examination>(new Action<Laboratory_examination>(this.attach_Laboratory_examinations), new Action<Laboratory_examination>(this.detach_Laboratory_examinations));
			this._Physical_examinations = new EntitySet<Physical_examination>(new Action<Physical_examination>(this.attach_Physical_examinations), new Action<Physical_examination>(this.detach_Physical_examinations));
			this._Doctor = default(EntityRef<Doctor>);
			this._Patient = default(EntityRef<Patient>);
			this._Registration = default(EntityRef<Registration>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_visit", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_visit
		{
			get
			{
				return this._id_visit;
			}
			set
			{
				if ((this._id_visit != value))
				{
					this.Onid_visitChanging(value);
					this.SendPropertyChanging();
					this._id_visit = value;
					this.SendPropertyChanged("id_visit");
					this.Onid_visitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(254) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_diagnosis", DbType="NVarChar(254)")]
		public string diagnosis
		{
			get
			{
				return this._diagnosis;
			}
			set
			{
				if ((this._diagnosis != value))
				{
					this.OndiagnosisChanging(value);
					this.SendPropertyChanging();
					this._diagnosis = value;
					this.SendPropertyChanged("diagnosis");
					this.OndiagnosisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_registration_date", DbType="DateTime NOT NULL")]
		public System.DateTime registration_date
		{
			get
			{
				return this._registration_date;
			}
			set
			{
				if ((this._registration_date != value))
				{
					this.Onregistration_dateChanging(value);
					this.SendPropertyChanging();
					this._registration_date = value;
					this.SendPropertyChanged("registration_date");
					this.Onregistration_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_execution_cancel_datetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> execution_cancel_datetime
		{
			get
			{
				return this._execution_cancel_datetime;
			}
			set
			{
				if ((this._execution_cancel_datetime != value))
				{
					this.Onexecution_cancel_datetimeChanging(value);
					this.SendPropertyChanging();
					this._execution_cancel_datetime = value;
					this.SendPropertyChanged("execution_cancel_datetime");
					this.Onexecution_cancel_datetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_patient", DbType="Int NOT NULL")]
		public int id_patient
		{
			get
			{
				return this._id_patient;
			}
			set
			{
				if ((this._id_patient != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_patientChanging(value);
					this.SendPropertyChanging();
					this._id_patient = value;
					this.SendPropertyChanged("id_patient");
					this.Onid_patientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_registration", DbType="Int NOT NULL")]
		public int id_registration
		{
			get
			{
				return this._id_registration;
			}
			set
			{
				if ((this._id_registration != value))
				{
					if (this._Registration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_registrationChanging(value);
					this.SendPropertyChanging();
					this._id_registration = value;
					this.SendPropertyChanged("id_registration");
					this.Onid_registrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_doctor", DbType="Int NOT NULL")]
		public int id_doctor
		{
			get
			{
				return this._id_doctor;
			}
			set
			{
				if ((this._id_doctor != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_doctorChanging(value);
					this.SendPropertyChanging();
					this._id_doctor = value;
					this.SendPropertyChanged("id_doctor");
					this.Onid_doctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_Laboratory_examination", Storage="_Laboratory_examinations", ThisKey="id_visit", OtherKey="id_visit")]
		public EntitySet<Laboratory_examination> Laboratory_examinations
		{
			get
			{
				return this._Laboratory_examinations;
			}
			set
			{
				this._Laboratory_examinations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_Physical_examination", Storage="_Physical_examinations", ThisKey="id_visit", OtherKey="id_visit")]
		public EntitySet<Physical_examination> Physical_examinations
		{
			get
			{
				return this._Physical_examinations;
			}
			set
			{
				this._Physical_examinations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Visit", Storage="_Doctor", ThisKey="id_doctor", OtherKey="id_doc", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._id_doctor = value.id_doc;
					}
					else
					{
						this._id_doctor = default(int);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Visit", Storage="_Patient", ThisKey="id_patient", OtherKey="id_patient", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._id_patient = value.id_patient;
					}
					else
					{
						this._id_patient = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_Visit", Storage="_Registration", ThisKey="id_registration", OtherKey="id_registration", IsForeignKey=true)]
		public Registration Registration
		{
			get
			{
				return this._Registration.Entity;
			}
			set
			{
				Registration previousValue = this._Registration.Entity;
				if (((previousValue != value) 
							|| (this._Registration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Registration.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Registration.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._id_registration = value.id_registration;
					}
					else
					{
						this._id_registration = default(int);
					}
					this.SendPropertyChanged("Registration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Laboratory_examinations(Laboratory_examination entity)
		{
			this.SendPropertyChanging();
			entity.Visit = this;
		}
		
		private void detach_Laboratory_examinations(Laboratory_examination entity)
		{
			this.SendPropertyChanging();
			entity.Visit = null;
		}
		
		private void attach_Physical_examinations(Physical_examination entity)
		{
			this.SendPropertyChanging();
			entity.Visit = this;
		}
		
		private void detach_Physical_examinations(Physical_examination entity)
		{
			this.SendPropertyChanging();
			entity.Visit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_doc;
		
		private string _medical_right_no;
		
		private string _user_name;
		
		private EntitySet<Visit> _Visits;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_docChanging(int value);
    partial void Onid_docChanged();
    partial void Onmedical_right_noChanging(string value);
    partial void Onmedical_right_noChanged();
    partial void Onuser_nameChanging(string value);
    partial void Onuser_nameChanged();
    #endregion
		
		public Doctor()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_doc", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_doc
		{
			get
			{
				return this._id_doc;
			}
			set
			{
				if ((this._id_doc != value))
				{
					this.Onid_docChanging(value);
					this.SendPropertyChanging();
					this._id_doc = value;
					this.SendPropertyChanged("id_doc");
					this.Onid_docChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_medical_right_no", DbType="NVarChar(20)")]
		public string medical_right_no
		{
			get
			{
				return this._medical_right_no;
			}
			set
			{
				if ((this._medical_right_no != value))
				{
					this.Onmedical_right_noChanging(value);
					this.SendPropertyChanging();
					this._medical_right_no = value;
					this.SendPropertyChanged("medical_right_no");
					this.Onmedical_right_noChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string user_name
		{
			get
			{
				return this._user_name;
			}
			set
			{
				if ((this._user_name != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_nameChanging(value);
					this.SendPropertyChanging();
					this._user_name = value;
					this.SendPropertyChanged("user_name");
					this.Onuser_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Visit", Storage="_Visits", ThisKey="id_doc", OtherKey="id_doctor")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Doctor", Storage="_User", ThisKey="user_name", OtherKey="user_name", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Doctors.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Doctors.Add(this);
						this._user_name = value.user_name;
					}
					else
					{
						this._user_name = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Examination_dictionary")]
	public partial class Examination_dictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _code;
		
		private char _type;
		
		private string _name;
		
		private EntitySet<Laboratory_examination> _Laboratory_examinations;
		
		private EntitySet<Physical_examination> _Physical_examinations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OntypeChanging(char value);
    partial void OntypeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Examination_dictionary()
		{
			this._Laboratory_examinations = new EntitySet<Laboratory_examination>(new Action<Laboratory_examination>(this.attach_Laboratory_examinations), new Action<Laboratory_examination>(this.detach_Laboratory_examinations));
			this._Physical_examinations = new EntitySet<Physical_examination>(new Action<Physical_examination>(this.attach_Physical_examinations), new Action<Physical_examination>(this.detach_Physical_examinations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="NVarChar(254) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NChar(1) NOT NULL")]
		public char type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(254) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examination_dictionary_Laboratory_examination", Storage="_Laboratory_examinations", ThisKey="code", OtherKey="result")]
		public EntitySet<Laboratory_examination> Laboratory_examinations
		{
			get
			{
				return this._Laboratory_examinations;
			}
			set
			{
				this._Laboratory_examinations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examination_dictionary_Physical_examination", Storage="_Physical_examinations", ThisKey="code", OtherKey="result")]
		public EntitySet<Physical_examination> Physical_examinations
		{
			get
			{
				return this._Physical_examinations;
			}
			set
			{
				this._Physical_examinations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Laboratory_examinations(Laboratory_examination entity)
		{
			this.SendPropertyChanging();
			entity.Examination_dictionary = this;
		}
		
		private void detach_Laboratory_examinations(Laboratory_examination entity)
		{
			this.SendPropertyChanging();
			entity.Examination_dictionary = null;
		}
		
		private void attach_Physical_examinations(Physical_examination entity)
		{
			this.SendPropertyChanging();
			entity.Examination_dictionary = this;
		}
		
		private void detach_Physical_examinations(Physical_examination entity)
		{
			this.SendPropertyChanging();
			entity.Examination_dictionary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Laboratory_examination")]
	public partial class Laboratory_examination : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_laboratory_examination;
		
		private System.DateTime _order_date;
		
		private System.Nullable<System.DateTime> _examination_execution_date;
		
		private System.Nullable<System.DateTime> _examination_approval_date;
		
		private string _doctor_comments;
		
		private string _result;
		
		private string _lab_manager_comments;
		
		private string _state;
		
		private int _id_visit;
		
		private System.Nullable<int> _id_laboratory_woker;
		
		private System.Nullable<int> _id_laboratory_manager;
		
		private EntityRef<Examination_dictionary> _Examination_dictionary;
		
		private EntityRef<Visit> _Visit;
		
		private EntityRef<Laboratory_manager> _Laboratory_manager;
		
		private EntityRef<Laboratory_worker> _Laboratory_worker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_laboratory_examinationChanging(int value);
    partial void Onid_laboratory_examinationChanged();
    partial void Onorder_dateChanging(System.DateTime value);
    partial void Onorder_dateChanged();
    partial void Onexamination_execution_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onexamination_execution_dateChanged();
    partial void Onexamination_approval_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onexamination_approval_dateChanged();
    partial void Ondoctor_commentsChanging(string value);
    partial void Ondoctor_commentsChanged();
    partial void OnresultChanging(string value);
    partial void OnresultChanged();
    partial void Onlab_manager_commentsChanging(string value);
    partial void Onlab_manager_commentsChanged();
    partial void OnstateChanging(string value);
    partial void OnstateChanged();
    partial void Onid_visitChanging(int value);
    partial void Onid_visitChanged();
    partial void Onid_laboratory_wokerChanging(System.Nullable<int> value);
    partial void Onid_laboratory_wokerChanged();
    partial void Onid_laboratory_managerChanging(System.Nullable<int> value);
    partial void Onid_laboratory_managerChanged();
    #endregion
		
		public Laboratory_examination()
		{
			this._Examination_dictionary = default(EntityRef<Examination_dictionary>);
			this._Visit = default(EntityRef<Visit>);
			this._Laboratory_manager = default(EntityRef<Laboratory_manager>);
			this._Laboratory_worker = default(EntityRef<Laboratory_worker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_laboratory_examination", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_laboratory_examination
		{
			get
			{
				return this._id_laboratory_examination;
			}
			set
			{
				if ((this._id_laboratory_examination != value))
				{
					this.Onid_laboratory_examinationChanging(value);
					this.SendPropertyChanging();
					this._id_laboratory_examination = value;
					this.SendPropertyChanged("id_laboratory_examination");
					this.Onid_laboratory_examinationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_order_date", DbType="DateTime NOT NULL")]
		public System.DateTime order_date
		{
			get
			{
				return this._order_date;
			}
			set
			{
				if ((this._order_date != value))
				{
					this.Onorder_dateChanging(value);
					this.SendPropertyChanging();
					this._order_date = value;
					this.SendPropertyChanged("order_date");
					this.Onorder_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_examination_execution_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> examination_execution_date
		{
			get
			{
				return this._examination_execution_date;
			}
			set
			{
				if ((this._examination_execution_date != value))
				{
					this.Onexamination_execution_dateChanging(value);
					this.SendPropertyChanging();
					this._examination_execution_date = value;
					this.SendPropertyChanged("examination_execution_date");
					this.Onexamination_execution_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_examination_approval_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> examination_approval_date
		{
			get
			{
				return this._examination_approval_date;
			}
			set
			{
				if ((this._examination_approval_date != value))
				{
					this.Onexamination_approval_dateChanging(value);
					this.SendPropertyChanging();
					this._examination_approval_date = value;
					this.SendPropertyChanged("examination_approval_date");
					this.Onexamination_approval_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doctor_comments", DbType="NVarChar(254)")]
		public string doctor_comments
		{
			get
			{
				return this._doctor_comments;
			}
			set
			{
				if ((this._doctor_comments != value))
				{
					this.Ondoctor_commentsChanging(value);
					this.SendPropertyChanging();
					this._doctor_comments = value;
					this.SendPropertyChanged("doctor_comments");
					this.Ondoctor_commentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_result", DbType="NVarChar(254)")]
		public string result
		{
			get
			{
				return this._result;
			}
			set
			{
				if ((this._result != value))
				{
					if (this._Examination_dictionary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnresultChanging(value);
					this.SendPropertyChanging();
					this._result = value;
					this.SendPropertyChanged("result");
					this.OnresultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lab_manager_comments", DbType="NVarChar(254)")]
		public string lab_manager_comments
		{
			get
			{
				return this._lab_manager_comments;
			}
			set
			{
				if ((this._lab_manager_comments != value))
				{
					this.Onlab_manager_commentsChanging(value);
					this.SendPropertyChanging();
					this._lab_manager_comments = value;
					this.SendPropertyChanged("lab_manager_comments");
					this.Onlab_manager_commentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_visit", DbType="Int NOT NULL")]
		public int id_visit
		{
			get
			{
				return this._id_visit;
			}
			set
			{
				if ((this._id_visit != value))
				{
					if (this._Visit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_visitChanging(value);
					this.SendPropertyChanging();
					this._id_visit = value;
					this.SendPropertyChanged("id_visit");
					this.Onid_visitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_laboratory_woker", DbType="Int")]
		public System.Nullable<int> id_laboratory_woker
		{
			get
			{
				return this._id_laboratory_woker;
			}
			set
			{
				if ((this._id_laboratory_woker != value))
				{
					if (this._Laboratory_worker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_laboratory_wokerChanging(value);
					this.SendPropertyChanging();
					this._id_laboratory_woker = value;
					this.SendPropertyChanged("id_laboratory_woker");
					this.Onid_laboratory_wokerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_laboratory_manager", DbType="Int")]
		public System.Nullable<int> id_laboratory_manager
		{
			get
			{
				return this._id_laboratory_manager;
			}
			set
			{
				if ((this._id_laboratory_manager != value))
				{
					if (this._Laboratory_manager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_laboratory_managerChanging(value);
					this.SendPropertyChanging();
					this._id_laboratory_manager = value;
					this.SendPropertyChanged("id_laboratory_manager");
					this.Onid_laboratory_managerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examination_dictionary_Laboratory_examination", Storage="_Examination_dictionary", ThisKey="result", OtherKey="code", IsForeignKey=true)]
		public Examination_dictionary Examination_dictionary
		{
			get
			{
				return this._Examination_dictionary.Entity;
			}
			set
			{
				Examination_dictionary previousValue = this._Examination_dictionary.Entity;
				if (((previousValue != value) 
							|| (this._Examination_dictionary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Examination_dictionary.Entity = null;
						previousValue.Laboratory_examinations.Remove(this);
					}
					this._Examination_dictionary.Entity = value;
					if ((value != null))
					{
						value.Laboratory_examinations.Add(this);
						this._result = value.code;
					}
					else
					{
						this._result = default(string);
					}
					this.SendPropertyChanged("Examination_dictionary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_Laboratory_examination", Storage="_Visit", ThisKey="id_visit", OtherKey="id_visit", IsForeignKey=true)]
		public Visit Visit
		{
			get
			{
				return this._Visit.Entity;
			}
			set
			{
				Visit previousValue = this._Visit.Entity;
				if (((previousValue != value) 
							|| (this._Visit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Visit.Entity = null;
						previousValue.Laboratory_examinations.Remove(this);
					}
					this._Visit.Entity = value;
					if ((value != null))
					{
						value.Laboratory_examinations.Add(this);
						this._id_visit = value.id_visit;
					}
					else
					{
						this._id_visit = default(int);
					}
					this.SendPropertyChanged("Visit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Laboratory_manager_Laboratory_examination", Storage="_Laboratory_manager", ThisKey="id_laboratory_manager", OtherKey="id_laboratory_manager", IsForeignKey=true)]
		public Laboratory_manager Laboratory_manager
		{
			get
			{
				return this._Laboratory_manager.Entity;
			}
			set
			{
				Laboratory_manager previousValue = this._Laboratory_manager.Entity;
				if (((previousValue != value) 
							|| (this._Laboratory_manager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Laboratory_manager.Entity = null;
						previousValue.Laboratory_examinations.Remove(this);
					}
					this._Laboratory_manager.Entity = value;
					if ((value != null))
					{
						value.Laboratory_examinations.Add(this);
						this._id_laboratory_manager = value.id_laboratory_manager;
					}
					else
					{
						this._id_laboratory_manager = default(Nullable<int>);
					}
					this.SendPropertyChanged("Laboratory_manager");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Laboratory_worker_Laboratory_examination", Storage="_Laboratory_worker", ThisKey="id_laboratory_woker", OtherKey="id_laboratory_worker", IsForeignKey=true)]
		public Laboratory_worker Laboratory_worker
		{
			get
			{
				return this._Laboratory_worker.Entity;
			}
			set
			{
				Laboratory_worker previousValue = this._Laboratory_worker.Entity;
				if (((previousValue != value) 
							|| (this._Laboratory_worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Laboratory_worker.Entity = null;
						previousValue.Laboratory_examinations.Remove(this);
					}
					this._Laboratory_worker.Entity = value;
					if ((value != null))
					{
						value.Laboratory_examinations.Add(this);
						this._id_laboratory_woker = value.id_laboratory_worker;
					}
					else
					{
						this._id_laboratory_woker = default(Nullable<int>);
					}
					this.SendPropertyChanged("Laboratory_worker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Laboratory_manager")]
	public partial class Laboratory_manager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_laboratory_manager;
		
		private string _user_name;
		
		private EntitySet<Laboratory_examination> _Laboratory_examinations;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_laboratory_managerChanging(int value);
    partial void Onid_laboratory_managerChanged();
    partial void Onuser_nameChanging(string value);
    partial void Onuser_nameChanged();
    #endregion
		
		public Laboratory_manager()
		{
			this._Laboratory_examinations = new EntitySet<Laboratory_examination>(new Action<Laboratory_examination>(this.attach_Laboratory_examinations), new Action<Laboratory_examination>(this.detach_Laboratory_examinations));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_laboratory_manager", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_laboratory_manager
		{
			get
			{
				return this._id_laboratory_manager;
			}
			set
			{
				if ((this._id_laboratory_manager != value))
				{
					this.Onid_laboratory_managerChanging(value);
					this.SendPropertyChanging();
					this._id_laboratory_manager = value;
					this.SendPropertyChanged("id_laboratory_manager");
					this.Onid_laboratory_managerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string user_name
		{
			get
			{
				return this._user_name;
			}
			set
			{
				if ((this._user_name != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_nameChanging(value);
					this.SendPropertyChanging();
					this._user_name = value;
					this.SendPropertyChanged("user_name");
					this.Onuser_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Laboratory_manager_Laboratory_examination", Storage="_Laboratory_examinations", ThisKey="id_laboratory_manager", OtherKey="id_laboratory_manager")]
		public EntitySet<Laboratory_examination> Laboratory_examinations
		{
			get
			{
				return this._Laboratory_examinations;
			}
			set
			{
				this._Laboratory_examinations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Laboratory_manager", Storage="_User", ThisKey="user_name", OtherKey="user_name", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Laboratory_managers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Laboratory_managers.Add(this);
						this._user_name = value.user_name;
					}
					else
					{
						this._user_name = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Laboratory_examinations(Laboratory_examination entity)
		{
			this.SendPropertyChanging();
			entity.Laboratory_manager = this;
		}
		
		private void detach_Laboratory_examinations(Laboratory_examination entity)
		{
			this.SendPropertyChanging();
			entity.Laboratory_manager = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Laboratory_worker")]
	public partial class Laboratory_worker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_laboratory_worker;
		
		private string _user_name;
		
		private EntitySet<Laboratory_examination> _Laboratory_examinations;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_laboratory_workerChanging(int value);
    partial void Onid_laboratory_workerChanged();
    partial void Onuser_nameChanging(string value);
    partial void Onuser_nameChanged();
    #endregion
		
		public Laboratory_worker()
		{
			this._Laboratory_examinations = new EntitySet<Laboratory_examination>(new Action<Laboratory_examination>(this.attach_Laboratory_examinations), new Action<Laboratory_examination>(this.detach_Laboratory_examinations));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_laboratory_worker", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_laboratory_worker
		{
			get
			{
				return this._id_laboratory_worker;
			}
			set
			{
				if ((this._id_laboratory_worker != value))
				{
					this.Onid_laboratory_workerChanging(value);
					this.SendPropertyChanging();
					this._id_laboratory_worker = value;
					this.SendPropertyChanged("id_laboratory_worker");
					this.Onid_laboratory_workerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string user_name
		{
			get
			{
				return this._user_name;
			}
			set
			{
				if ((this._user_name != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_nameChanging(value);
					this.SendPropertyChanging();
					this._user_name = value;
					this.SendPropertyChanged("user_name");
					this.Onuser_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Laboratory_worker_Laboratory_examination", Storage="_Laboratory_examinations", ThisKey="id_laboratory_worker", OtherKey="id_laboratory_woker")]
		public EntitySet<Laboratory_examination> Laboratory_examinations
		{
			get
			{
				return this._Laboratory_examinations;
			}
			set
			{
				this._Laboratory_examinations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Laboratory_worker", Storage="_User", ThisKey="user_name", OtherKey="user_name", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Laboratory_workers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Laboratory_workers.Add(this);
						this._user_name = value.user_name;
					}
					else
					{
						this._user_name = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Laboratory_examinations(Laboratory_examination entity)
		{
			this.SendPropertyChanging();
			entity.Laboratory_worker = this;
		}
		
		private void detach_Laboratory_examinations(Laboratory_examination entity)
		{
			this.SendPropertyChanging();
			entity.Laboratory_worker = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_patient;
		
		private string _fname;
		
		private string _lname;
		
		private string _PESEL;
		
		private EntityRef<Address> _Address;
		
		private EntitySet<Visit> _Visits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_patientChanging(int value);
    partial void Onid_patientChanged();
    partial void OnfnameChanging(string value);
    partial void OnfnameChanged();
    partial void OnlnameChanging(string value);
    partial void OnlnameChanged();
    partial void OnPESELChanging(string value);
    partial void OnPESELChanged();
    #endregion
		
		public Patient()
		{
			this._Address = default(EntityRef<Address>);
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_patient", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_patient
		{
			get
			{
				return this._id_patient;
			}
			set
			{
				if ((this._id_patient != value))
				{
					this.Onid_patientChanging(value);
					this.SendPropertyChanging();
					this._id_patient = value;
					this.SendPropertyChanged("id_patient");
					this.Onid_patientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string fname
		{
			get
			{
				return this._fname;
			}
			set
			{
				if ((this._fname != value))
				{
					this.OnfnameChanging(value);
					this.SendPropertyChanging();
					this._fname = value;
					this.SendPropertyChanged("fname");
					this.OnfnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string lname
		{
			get
			{
				return this._lname;
			}
			set
			{
				if ((this._lname != value))
				{
					this.OnlnameChanging(value);
					this.SendPropertyChanging();
					this._lname = value;
					this.SendPropertyChanged("lname");
					this.OnlnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PESEL", DbType="NChar(11) NOT NULL", CanBeNull=false)]
		public string PESEL
		{
			get
			{
				return this._PESEL;
			}
			set
			{
				if ((this._PESEL != value))
				{
					this.OnPESELChanging(value);
					this.SendPropertyChanging();
					this._PESEL = value;
					this.SendPropertyChanged("PESEL");
					this.OnPESELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Address", Storage="_Address", ThisKey="id_patient", OtherKey="id_patient", IsUnique=true, IsForeignKey=false)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Patient = null;
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Patient = this;
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Visit", Storage="_Visits", ThisKey="id_patient", OtherKey="id_patient")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Physical_examination")]
	public partial class Physical_examination : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_physical_examination;
		
		private string _result;
		
		private int _id_visit;
		
		private EntityRef<Examination_dictionary> _Examination_dictionary;
		
		private EntityRef<Visit> _Visit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_physical_examinationChanging(int value);
    partial void Onid_physical_examinationChanged();
    partial void OnresultChanging(string value);
    partial void OnresultChanged();
    partial void Onid_visitChanging(int value);
    partial void Onid_visitChanged();
    #endregion
		
		public Physical_examination()
		{
			this._Examination_dictionary = default(EntityRef<Examination_dictionary>);
			this._Visit = default(EntityRef<Visit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_physical_examination", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_physical_examination
		{
			get
			{
				return this._id_physical_examination;
			}
			set
			{
				if ((this._id_physical_examination != value))
				{
					this.Onid_physical_examinationChanging(value);
					this.SendPropertyChanging();
					this._id_physical_examination = value;
					this.SendPropertyChanged("id_physical_examination");
					this.Onid_physical_examinationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_result", DbType="NVarChar(254)")]
		public string result
		{
			get
			{
				return this._result;
			}
			set
			{
				if ((this._result != value))
				{
					if (this._Examination_dictionary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnresultChanging(value);
					this.SendPropertyChanging();
					this._result = value;
					this.SendPropertyChanged("result");
					this.OnresultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_visit", DbType="Int NOT NULL")]
		public int id_visit
		{
			get
			{
				return this._id_visit;
			}
			set
			{
				if ((this._id_visit != value))
				{
					if (this._Visit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onid_visitChanging(value);
					this.SendPropertyChanging();
					this._id_visit = value;
					this.SendPropertyChanged("id_visit");
					this.Onid_visitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examination_dictionary_Physical_examination", Storage="_Examination_dictionary", ThisKey="result", OtherKey="code", IsForeignKey=true)]
		public Examination_dictionary Examination_dictionary
		{
			get
			{
				return this._Examination_dictionary.Entity;
			}
			set
			{
				Examination_dictionary previousValue = this._Examination_dictionary.Entity;
				if (((previousValue != value) 
							|| (this._Examination_dictionary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Examination_dictionary.Entity = null;
						previousValue.Physical_examinations.Remove(this);
					}
					this._Examination_dictionary.Entity = value;
					if ((value != null))
					{
						value.Physical_examinations.Add(this);
						this._result = value.code;
					}
					else
					{
						this._result = default(string);
					}
					this.SendPropertyChanged("Examination_dictionary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_Physical_examination", Storage="_Visit", ThisKey="id_visit", OtherKey="id_visit", IsForeignKey=true)]
		public Visit Visit
		{
			get
			{
				return this._Visit.Entity;
			}
			set
			{
				Visit previousValue = this._Visit.Entity;
				if (((previousValue != value) 
							|| (this._Visit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Visit.Entity = null;
						previousValue.Physical_examinations.Remove(this);
					}
					this._Visit.Entity = value;
					if ((value != null))
					{
						value.Physical_examinations.Add(this);
						this._id_visit = value.id_visit;
					}
					else
					{
						this._id_visit = default(int);
					}
					this.SendPropertyChanged("Visit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Registration")]
	public partial class Registration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id_registration;
		
		private string _user_name;
		
		private EntitySet<Visit> _Visits;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onid_registrationChanging(int value);
    partial void Onid_registrationChanged();
    partial void Onuser_nameChanging(string value);
    partial void Onuser_nameChanged();
    #endregion
		
		public Registration()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id_registration", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id_registration
		{
			get
			{
				return this._id_registration;
			}
			set
			{
				if ((this._id_registration != value))
				{
					this.Onid_registrationChanging(value);
					this.SendPropertyChanging();
					this._id_registration = value;
					this.SendPropertyChanged("id_registration");
					this.Onid_registrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_name", DbType="NVarChar(50)")]
		public string user_name
		{
			get
			{
				return this._user_name;
			}
			set
			{
				if ((this._user_name != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_nameChanging(value);
					this.SendPropertyChanging();
					this._user_name = value;
					this.SendPropertyChanged("user_name");
					this.Onuser_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registration_Visit", Storage="_Visits", ThisKey="id_registration", OtherKey="id_registration")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Registration", Storage="_User", ThisKey="user_name", OtherKey="user_name", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Registrations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Registrations.Add(this);
						this._user_name = value.user_name;
					}
					else
					{
						this._user_name = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Registration = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Registration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _user_name;
		
		private string _password;
		
		private System.Nullable<System.DateTime> _retire_date;
		
		private string _roles;
		
		private string _lname;
		
		private string _fname;
		
		private EntitySet<Doctor> _Doctors;
		
		private EntitySet<Laboratory_manager> _Laboratory_managers;
		
		private EntitySet<Laboratory_worker> _Laboratory_workers;
		
		private EntitySet<Registration> _Registrations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_nameChanging(string value);
    partial void Onuser_nameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void Onretire_dateChanging(System.Nullable<System.DateTime> value);
    partial void Onretire_dateChanged();
    partial void OnrolesChanging(string value);
    partial void OnrolesChanged();
    partial void OnlnameChanging(string value);
    partial void OnlnameChanged();
    partial void OnfnameChanging(string value);
    partial void OnfnameChanged();
    #endregion
		
		public User()
		{
			this._Doctors = new EntitySet<Doctor>(new Action<Doctor>(this.attach_Doctors), new Action<Doctor>(this.detach_Doctors));
			this._Laboratory_managers = new EntitySet<Laboratory_manager>(new Action<Laboratory_manager>(this.attach_Laboratory_managers), new Action<Laboratory_manager>(this.detach_Laboratory_managers));
			this._Laboratory_workers = new EntitySet<Laboratory_worker>(new Action<Laboratory_worker>(this.attach_Laboratory_workers), new Action<Laboratory_worker>(this.detach_Laboratory_workers));
			this._Registrations = new EntitySet<Registration>(new Action<Registration>(this.attach_Registrations), new Action<Registration>(this.detach_Registrations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string user_name
		{
			get
			{
				return this._user_name;
			}
			set
			{
				if ((this._user_name != value))
				{
					this.Onuser_nameChanging(value);
					this.SendPropertyChanging();
					this._user_name = value;
					this.SendPropertyChanged("user_name");
					this.Onuser_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_retire_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> retire_date
		{
			get
			{
				return this._retire_date;
			}
			set
			{
				if ((this._retire_date != value))
				{
					this.Onretire_dateChanging(value);
					this.SendPropertyChanging();
					this._retire_date = value;
					this.SendPropertyChanged("retire_date");
					this.Onretire_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roles", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string roles
		{
			get
			{
				return this._roles;
			}
			set
			{
				if ((this._roles != value))
				{
					this.OnrolesChanging(value);
					this.SendPropertyChanging();
					this._roles = value;
					this.SendPropertyChanged("roles");
					this.OnrolesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string lname
		{
			get
			{
				return this._lname;
			}
			set
			{
				if ((this._lname != value))
				{
					this.OnlnameChanging(value);
					this.SendPropertyChanging();
					this._lname = value;
					this.SendPropertyChanged("lname");
					this.OnlnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string fname
		{
			get
			{
				return this._fname;
			}
			set
			{
				if ((this._fname != value))
				{
					this.OnfnameChanging(value);
					this.SendPropertyChanging();
					this._fname = value;
					this.SendPropertyChanged("fname");
					this.OnfnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Doctor", Storage="_Doctors", ThisKey="user_name", OtherKey="user_name")]
		public EntitySet<Doctor> Doctors
		{
			get
			{
				return this._Doctors;
			}
			set
			{
				this._Doctors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Laboratory_manager", Storage="_Laboratory_managers", ThisKey="user_name", OtherKey="user_name")]
		public EntitySet<Laboratory_manager> Laboratory_managers
		{
			get
			{
				return this._Laboratory_managers;
			}
			set
			{
				this._Laboratory_managers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Laboratory_worker", Storage="_Laboratory_workers", ThisKey="user_name", OtherKey="user_name")]
		public EntitySet<Laboratory_worker> Laboratory_workers
		{
			get
			{
				return this._Laboratory_workers;
			}
			set
			{
				this._Laboratory_workers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Registration", Storage="_Registrations", ThisKey="user_name", OtherKey="user_name")]
		public EntitySet<Registration> Registrations
		{
			get
			{
				return this._Registrations;
			}
			set
			{
				this._Registrations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Doctors(Doctor entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Laboratory_managers(Laboratory_manager entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Laboratory_managers(Laboratory_manager entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Laboratory_workers(Laboratory_worker entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Laboratory_workers(Laboratory_worker entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Registrations(Registration entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
